#!/usr/bin/env ruby
#
# This tool checks all applications bundles on the typical OS X installation
# paths whether they contain an outdated [MITM-vulnerable][1] version of
# Sparkle.
# If that's the case, it does some further heuristics checks to try to
# determine whether the application's updater is actually vulnerable.
# In the end, it uses this information to classify the risk, where the
# classifications may take the following values:
#
# *IMMINENT DANGER*: the heuristics indicate that it can't be assured, that
# using the updater won't compromise the system.
# In the best case, the app publisher provides updated binaries with a patched
# version of Sparkle, which isn't vulnerable or avoids using unencrypted
# HTTP connections for retrieving the AppCast, as strongly encouraged by
# Sparkle's documentation.
# Alternative countermeasures may range from disabling auto-updates and not
# using the updater anymore, over restricting the app's network functionalities
# to putting the app under quarantine.
#
# *UNKNOWN*: the app was compiled against an older SDK, so that [ATS][2] is not
# active or there are exclusions from ATS, while the feed URL for the AppCast
# is not declared in the Info.plist, so it has to be programmatically provided,
# which can't be determined by statical analysis. Nevertheless the tool
# inspects all string literals in the executable to find all HTTP URLs, which
# might include the feed URL. This strategy has limits and can't catch URLs,
# which weren't fully hardcoded as strings or obfuscated in another way. The
# found URLs are printed for further investigation through the user to allow a
# better risk estimation. If an insecure URL serving an AppCast can be found,
# it is likely that the app is vulnerable, otherwise it can't be excluded.
#
# *BROKEN UPDATER*: the app doesn't have exclusions from ATS while the feed
# URL is insecure and it was compiled against OS X 10.11 SDK, which causes that
# ATS is enabled and insecure HTTP requests are blocked by default. That means
# the updater won't be able to download any updates.
#
# [1]: https://sparkle-project.org/documentation/security/
# [2]: https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/
#
require 'pathname'
require 'open3'

SPARKLE_MIN_VERSION = Gem::Version.new('1.13.1')
ATS_MIN_SDK_MAJOR = 15.freeze

class PlistBuddy
  BIN = '/usr/libexec/PlistBuddy'.freeze
  
  class KeyNotFound < StandardError
  end
  
  def self.exec(path, command)
    out, status = Open3.capture2e("#{BIN} -c \"#{command}\" \"#{path}\"")
    out = out.chomp
    unless status.success?
      if out =~ /Does Not Exist$/
        raise KeyNotFound, out
      else
        raise out
      end
    end
    out
  end

  def self.read(path, keypath)
    keypath = keypath.join(':') if keypath.is_a?(Array)
    exec(path, "Print :#{keypath}")
  end
end

class App
  def self.system_apps
    Pathname.glob('/Applications/**.app').map { |path| App.new(path) }
  end
  
  def self.user_apps
    Pathname.glob('/Users/*/Applications/**.app').map { |path| App.new(path) }
  end
  
  attr_reader :path
  
  def initialize(path)
    @path = path
  end
  
  def info_plist_path
    path + 'Contents/Info.plist'
  end
  
  def bundle_identifier
    @bundle_identifier ||= PlistBuddy.read(info_plist_path, :CFBundleIdentifier)
  end
  
  def user_defaults_path
    Pathname('~/Library/Preferences') + "#{bundle_identifier}.plist"
  end
  
  def synced_user_defaults_path
    Pathname('~/Library/SyncedPreferences') + "#{bundle_identifier}.plist"
  end
  
  def sparke_framework_path
    path + 'Contents/Frameworks/Sparkle.framework'
  end
  
  def executable_name
    @executable_name ||= PlistBuddy.read(info_plist_path, :CFBundleExecutable)
  end
  
  def executable_path
    @executable_path ||= path + 'Contents/MacOS' + executable_name
  end
  
  def uses_sparkle?
    File.exist?(sparke_framework_path)
  end
  
  def sparkle_version
    return @sparkle_version if defined?(@sparkle_version)
    @sparkle_version ||= PlistBuddy.read(path + 'Contents/Frameworks/Sparkle.framework/Versions/Current/Resources/Info.plist', :CFBundleShortVersionString) rescue nil
  end
  
  def allows_arbitrary_loads?
    @allows_arbitrary_loads ||= PlistBuddy.read(info_plist_path, [:NSAppTransportSecurity, :NSAllowsArbitraryLoads]) rescue false
  end
  
  def transport_security_exception_domains
    @transport_security_exception_domains ||= PlistBuddy.read(info_plist_path, [:NSAppTransportSecurity, :NSExceptionDomains]) rescue ''
  end
  
  def has_insecure_exceptions?
    @has_insecure_exceptions ||= !!(@transport_security_exception_domains =~ /NS(ThirdParty)?ExceptionAllowsInsecureHTTPLoads = false/)
  end
  
  def sparkle_feed_url
    return @sparkle_feed_url if defined?(@sparkle_feed_url)
    @sparkle_feed_url = read_feed_url_from_path(synced_user_defaults_path)
    @sparkle_feed_url ||= read_feed_url_from_path(user_defaults_path)
    @sparkle_feed_url ||= read_feed_url_from_path(info_plist_path)
  end
  
  def read_feed_url_from_path(path)
    return nil unless path.exist?
    value = PlistBuddy.read(path, :SUFeedURL)
    return nil if value.empty? || value == 'NULL'
    value
  rescue PlistBuddy::KeyNotFound
    nil
  end
  
  def exposes_feed_url?
    !sparkle_feed_url.nil?
  end
  
  def uses_insecure_feed_url?
    @uses_insecure_feed_url ||= !!(sparkle_feed_url =~ /^http\:/) if exposes_feed_url?
  end
  
  def sdk_build
    @sdk_build ||= PlistBuddy.read(info_plist_path, :DTSDKBuild) rescue nil
  end
  
  def ats_enabled?
    return @ats_enabled if defined?(@ats_enabled)
    @ats_enabled ||= sdk_build.nil? ? false : sdk_build.split(/[a-z]/i).first.to_i >= ATS_MIN_SDK_MAJOR
  end
  
  def allows_insecure_access?
    !ats_enabled? || allows_arbitrary_loads? || has_insecure_exceptions?
  end
  
  def urls_in_executable
    @urls_in_executable ||= `strings "#{executable_path}" | grep -C0 --color=never -E "^https?:"`.chomp.split("\n")
  end
  
  def insecure_urls_in_executable
    @insecure_urls_in_executable ||= urls_in_executable.select { |url| url =~ /^http:/ }
  end
  
  def risk_classification
    @risk_classification ||= if uses_insecure_feed_url?
      if allows_insecure_access?
        :danger
      else
        :broken_updater
      end
    elsif !exposes_feed_url? && allows_insecure_access?
      :unknown
    else
      :unaffected
    end
  end
end

class String
  def green
    "\033[0;32m#{self}\e[0m"
  end

  def yellow
    "\033[0;33m#{self}\e[0m"
  end

  def red
    "\033[0;31m#{self}\e[0m"
  end
end

puts "Analyze â€¦"

apps = App.system_apps + App.user_apps
sparkle_updated_apps = apps.select(&:uses_sparkle?)
outdated_apps = sparkle_updated_apps.select do |app|
  next true if app.sparkle_version.nil?
  parseable_version, _ = app.sparkle_version.split(' ')
  Gem::Version.new(parseable_version) < SPARKLE_MIN_VERSION
end
grouped_apps = outdated_apps.group_by(&:risk_classification)
potential_vulnerable_apps = outdated_apps - (grouped_apps[:unaffected] || [])

puts "Report:"
puts "Examined #{apps.count} apps of which #{sparkle_updated_apps.count} are updated via Sparkle.".green
puts "#{outdated_apps.count} apps use outdated versions of Sparkle, which don't include the checked security patch.".yellow
if potential_vulnerable_apps.count > 0
  puts "The following #{potential_vulnerable_apps.count} apps are potentially vulnerable:".red
  puts
else
  puts 'No potentially vulnerable apps were detected. ðŸŽ‰'.green
end

grouped_apps = potential_vulnerable_apps.group_by(&:risk_classification)
[:danger, :unknown, :broken_updater].each do |risk_classification|
  next unless grouped_apps[risk_classification]
  grouped_apps[risk_classification].each do |app|
    puts "* #{app.path.basename}"
    puts "  Sparkle Version: '#{app.sparkle_version}'"
    puts "  Feed URL: #{app.sparkle_feed_url}" if app.exposes_feed_url?

    if !app.ats_enabled?
      puts "  âœ— ATS is not active".red
    else
      puts "  âœ“ ATS is active".green
      if app.allows_arbitrary_loads?
        puts "  âœ— Allows arbitrary loads".red
      else 
        puts "  âœ“ Doesn't allow arbitrary loads".green
      end
      if app.has_insecure_exceptions?
        puts "  âœ— Has insecure ATS exceptions:".red
        puts "      " + app.transport_security_exception_domains.split("\n").join("\n      ")
      else 
        puts "  âœ“ Doesn't have insecure ATS exceptions".green
      end
    end
    
    case app.uses_insecure_feed_url?
      when true  then puts "  âœ— Uses an insecure Feed URL".red
      when false then puts "  âœ“ Uses a secure Feed URL".green
      when nil   then
        puts "  â„¹ Doesn't expose the Feed URL".yellow
        unless app.insecure_urls_in_executable.empty?
          puts "  â„¹ Has insecure URLs in its executable:".yellow
          puts "      " + app.insecure_urls_in_executable.join("\n      ")
          puts "    If any of these URLs provides the appcast, then this app is vulnerable."
        else 
          puts "  âœ“ Doesn't have any insecure URLs in its executable".green
        end
    end

    classification = case app.risk_classification
      when :danger         then 'IMMINENT DANGER'.red
      when :broken_updater then 'BROKEN UPDATER'.yellow
      when :unknown        then 'UNKNOWN'.yellow
      when :unaffected     then 'UNAFFECTED'.green
    end
    puts "  Risk classification: #{classification}"
    
    puts
  end
end
